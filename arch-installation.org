#+title: Arch Installation

** artix only
- username and pass: artix artix
- *networking*:
  - unblocks wifi
    - rfkill unblock wifi
    - ip link set wlan0 up
- *partition disk*, format partitions, mount partitions
- *basestrap* /mnt base base-devel s6 elogind-s6 linux linux-firmware vim
- ...
- s6-rc-bundle add default NetworkManager bluetoothd
- s6-rc -u change bluetoothd (start service rn)

NOTEs: terminus-font for vim?

** Connect to the internet
#+NAME: arch
- Ensure your network interface is listed and enabled, for example with
  ip-link(8): ~ip link~
- for wireless make sure the card is not blocked with rfkill
- wi-fi connection via iwctl
- configure network connection:
  - (arch) -> dhcp or static IP address
  - (artix) -> redirects to [[https://wiki.archlinux.org/title/Network_configuration/Wireless][arch wiki network configuration / Wireless]]
- # ping archlinux.org

[[https://youtu.be/QzY2T3B4wlo?t=245][This vid]] steps:
- activate wifi adapter - ~ip link set <adapter_name (wlan0?)> up~
- if it's blocked - ~rfkill unblock wifi~
- repeat 1st step
- connmanctl -> scan wifi -> services
- register the agent to handle user requests - ~agent on~
- connect wifi_<tab>_<first3numbers><tab>

[[https://youtu.be/DPLnBPM4DhI?t=719][This vid]] info:

- Make sure we have internet connection: ~ip addr show~ (or just ~ip a~). There
  ya'll c your wireless connection as =wlan0= or something.
- To connect to wi-fi type ~iwctl~, then if u don't know your wireless device name
  run ~device list~.
- Find the wi-fi - ~station {wireless_device_name} scan~, which won't show
  anything, but will initiate the scan.
- Get networks - ~station {wireless_device_name} get-networks~
- connect - ~station {device_name} connect {wifiname}~. After that your ~ip a~
  should give wlan ip.

** Update system clock
arch:
- Use timedatectl(1) to ensure the system clock is accurate:
  : # timedatectl set-ntp true
- To check the service status, use ~timedatectl status~.

artix:
- Set the time zone: ~ln -sf /usr/share/zoneinfo/Region/City /etc/localtime~
- Run hwclock to generate /etc/adjtime:
  ~hwclock --systohc~ (Note that this will default to UTC)

** Partition the disks
/Also mentions [[https://wiki.archlinux.org/index.php/Partitioning#Example_layouts][arch wiki partitioning]] page./

*NOTE:* The BIOS boot partition is necessary on UEFI systems with a
GPT-partitioned disk. EFI system partition has to be created and mounted at
/mnt/boot and the suggested size is around *512* MiB.

: sudo parted -l # find out whether your disk is gpt or mbr

When recognized by the live system, disks are assigned to a block device such as
/dev/sda, /dev/nvme0n1 or /dev/mmcblk0. To identify these devices, use =lsblk= or
fdisk.

: # fdisk -l

# Results ending in rom, loop or airoot may be ignored.

The following partitions are required for a chosen device:
- One partition for the root directory /.
- For booting in UEFI mode: an EFI system partition.

If you want to create any stacked block devices for LVM, *system encryption* or
RAID, do it now.

Use fdisk / cfdisk / parted to modify partition tables. For example:

: # fdisk /dev/the_disk_to_be_partitioned

NOTE: If the disk from which you want to boot already has an EFI system
partition, do not create another one, but use the existing partition instead.

*** Using cfdisk
- cfdisk /dev/sd<something>?
- delete all partitions
- write -> yes
- new -> 512M -> type -> EFI system
- choose free space -> new -> <enter> -> type remains linux filesystem
- write -> yes -> quit

*** Using fdisk
- ~p~ - list all partitions that u currently have
- ~g~ - create new gpt-partition table (or ~d~ to delete particular ones)
- ~n[ew]~ -> 1 (default) -> 2048 (default) -> +1G (efi partition) (tho wiki
  recommends +512M)
- ~n~ -> 3x enter (root partition)
- ~t[ype]~ -> 1st partition (efi one) -> l[ist] to get all available types ->
  choose EFI system
- set root partition type to /Linux filesystem/
- ~p~ -> check which partitions you ended up with
- ~w[rite]~ if everything is as u want

*** Dm-encrypt
[[https://wiki.archlinux.org/title/Dm-crypt][wiki page]] (there follow 1st 2 'usage' links), and useful [[https://www.youtube.com/watch?v=P0GISSpLlVI][vid]]

Boot loader must be on *separate* partition.

~modprobe dm-crypt~ - be sure module is loaded
~cryptsetup benchmark~ - optional

https://youtu.be/DPLnBPM4DhI?t=3171 (encrypting the largest partition):
- ~cryptsetup luksFormat (-v[erbose] to get more output) (-s[ize of key] 512)
  (-h[ash] sha512) {partition_name (/dev/sd[something])}~ -> YES ...
- ~cryptsetup open (--type luks (can b omitted)) {partition_name}
  {name_of_partition_for_mapper_to_use}~ - many name it 'cryptroot', *BUT* when
  referring (when formatting for instance) to this partition now u gonna use
  =/dev/mapper/{chosen_name}=, same when mounting it.
- next steps in [[*After chrooted][After chrooted]] section

** Format partitions
If you are doing a UEFI installation, the boot partition is not optional and
needs to be formatted as fat32.

: mkfs.fat -F 32 /dev/sd<?>

You can label EFI partition with ~fatlabel /dev/sda4 BOOT~ command

Format remaining partitions (use mapper for partition that is encrypted):

: mkfs.ext4 (-L ROOT) /dev/sda<?>        <- root partition

** Mount Partitions
#+begin_src shell
swapon /dev/disk/by-label/SWAP             (if created)
mount /dev/disk/by-label/ROOT /mnt # or mount /dev/mapper/<name> /mnt
# mkdir /mnt/boot
# mkdir /mnt/home
# mount /dev/disk/by-label/HOME /mnt/home    (if created)
mount --mkdir /dev/disk/by-label/BOOT /mnt/boot    (if created)
#+end_src

~lsblk~ to check mounted partitions

** Select the mirrors
In prev step when connected internet if u ran reflector and mirrors update then
u basically have left to comment out unwanted ones.

From [[https://youtu.be/SFzN6e7USGk?t=242][this vid]] (after u connected the net):
- ~reflector -c {country (Russia)} -a 6 (age of the server) --sort rate (of
  speed) --save /etc/pacman.d/mirrorlist~
- ~pacman -Syy~

Packages to be installed must be downloaded from mirror servers, which are
defined in =/etc/pacman.d/mirrorlist=. On the live system, after connecting to the
internet, reflector updates the mirror list by choosing 20 most recently
synchronized HTTPS mirrors and sorting them by download rate.

The higher a mirror is placed in the list, the more priority it is given when
downloading a package. You may want to inspect the file to see if it is
satisfactory. If it is not, edit the file accordingly, and move the
geographically closest mirrors to the top of the list, although other criteria
should be taken into account.

This file will later be copied to the new system by pacstrap, so it is worth
getting right.

*NOTE:* mirrors setup, remove us ones [[https://wiki.archlinux.org/title/Mirrors][link]]

** Install essential packages
#+NAME: arch
: pacstrap /mnt base linux-zen (linux-zen-headers) linux-firmware

#+NAME: artix
: basestrap /mnt base base-devel openrc elogind-openrc linux-zen (linux-zen-headers) linux-firmware

/[[https://archlinux.org/groups/x86_64/base-devel/][base-devel]] packages/

To install other packages or package groups, append the names to the pacstrap
command above (space separated) or use pacman while chrooted into the new
system. For comparison, packages available in the live system can be found in
pkglist.x86_64.txt.


** Configure the system
+ *Fstab*: Generate an fstab file (use -U or -L to define by UUID or labels,
  respectively):
  - /arch/ : ~genfstab -U /mnt >> /mnt/etc/fstab~
  - /artix/ : ~fstabgen -U /mnt >> /mnt/etc/fstab~
  - Check the resulting =/mnt/etc/fstab= file, and edit it in case of errors.
+ *Chroot*: Check the resulting fstab for errors before rebooting. Now, you can
  chroot into your new Artix system with: ~artix-chroot /mnt # formerly
  artools-chrooT~
+ *Time zone*: Set the time zone (tab completion works):
  - ~timedatectl list-timezones | grep {City}~ -> will output something like
    Europe/Zurich
  - ~ln -sf /usr/share/zoneinfo/Region/City /etc/localtime~. [[https://youtu.be/DPLnBPM4DhI?t=5768][Some]] instead run
    ~timedatectl set-timezone Country/City~.
  - Run hwclock(8) to generate /etc/adjtime: ~hwclock --systohc~. This command
    assumes the hardware clock is set to UTC. See System time#Time standard for
    details.
+ *Localization*
  - vim ~/etc/locale.gen~ (uncomment needed lang(s))
  - Generate the locales: ~locale-gen~
  - vim ~/etc/locale.conf~ -> LANG=en_US.UTF-8
  - User-specific locale changes may be made to their respective =~/.bashrc=, for
    example: ~export LANG="en_US.UTF-8"; export LC_COLLATE="C"~
+ *Network configuration*: [[https://wiki.artixlinux.org/Main/Installation#Network_configuration][artix wiki section]]
  - ... or instead of directly using a standalone [[https://wiki.archlinux.org/title/Network_configuration#DHCP][DHCP]] client you can also use a
    [[https://wiki.archlinux.org/title/Network_configuration#Network_managers][network manager]], some of which have a built-in DHCP client.
  - [[https://youtu.be/DPLnBPM4DhI?t=4129][Vid]]: innstall some pkgs for wi-fi networking: networkmanager
    networkmanager-s6 network-manager-applet dialog (which will
    allow us to use something like wi-fi menu and the ability to connect to wifi
    over cmd in the situation where our gui won't work)
  - enable network namager in your init system (also on artix wiki)
+ *Add user(s)*
  - ~passwd~
  - ~useradd -mG wheel <user>~
    - -m is home dir
    - -G creates a suplementary group (a work group), it ?has? to do with sudo
      privileges
  - ~passwd <user>~
  - ~EDITOR=vim visudo~ -> uncomment wheel
  - Set [[https://wiki.artixlinux.org/Main/Configuration#User_permissions][user permissions]]
+ *bootloader*
  - pacman -S grub efibootmgr dosfstools
  - grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub
  - grub-mkconfig -o /boot/grub/grub.cfg
  - Also [[https://youtu.be/SFzN6e7USGk?t=1454][some]] add ~video=1920x1080~ in the end of ~GRUB_CMDLINE_LINUX_DEFAULT~ line.
  - install =amd-ucode= or =intel-ucode= And rerun ~grub-mkconfig ...~
+ *Before reboot*
  - _bluetooth_: bluez bluez-utils bluez-openrc
  - _audio_: alsa-utils pulseaudio pulseaudio-bluetooth
    - install =alsa-utils-s6= and enable alsa service
  - _misc_: git dosfstools linux-headers xdg-utils xdg-user-dirs unzip wget fzf lf
  - man-db, man-pages and texinfo. (those *are not* included in /base-devel/ group)
  - =openssh= & =openssh-openrc= - gives the ability to manage installation remotely.
    If you do enable that figure out how to make it start when your computer
    starts (with systemd u jus need to run ~systemctl enable sshd~, but i ain't usin
    it). Next steps r optional, but in case you want to connect to your machine via ssh from another one: ~rc-update add sshd default~
  - (recheck) alsa-firmware & [[https://archlinux.org/packages/?name=sof-firmware][sof-firmware]] for [[https://wiki.archlinux.org/title/Advanced_Linux_Sound_Architecture#ALSA_firmware][sound-cards]] (e.g. a network
    manager or DHCP client)
  - *don't forget to enable needed services on boot and add them to groups /
    bundles*
+ *reboot*
  - Exit the chroot environment by typing ~exit~ or pressing =Ctrl+d=.
  - Optionally manually unmount all the partitions with ~umount -R /mnt~: this
    allows noticing any "busy" partitions, and finding the cause with fuser(1).
    (some ppl use ~umount -a~ (-a for all))
  - Finally, restart the machine by typing ~reboot~: any partitions still mounted
    will be automatically unmounted by systemd.
+ setup *wifi*
  - ~s6-rc -u change NetworkManager~
  - ~sudo nmtui~
  - ~touch /etc/s6/adminsv/default/contents.d/NetworkManager~
+ *Enable arch repos*
  - [[https://wiki.artixlinux.org/Main/Repositories#Arch_repositories][arch repos]]
  - run ~pacman-key --populate archlinux~ (which should b suggested to run after
    package installation).
  - edit arch mirrorlist -> vim ~/etc/pacman.d/mirrorlist-arch -> uncomment your
    country mirrors
+ *graphics*: install =nvidia-dkms=
+ *FROM NOW ON DO THINGS ONLY AS NORMAL USER, NOT SU*
+ [[https://docs.github.com/en/authentication/connecting-to-github-with-ssh][setup ssh for git]]
+ copy dotfiles and run ~stow .~
+ [[https://www.makeuseof.com/install-and-use-yay-arch-linux/#how-to-install-yay-on-arch-linux][install yay]]
+ ~usermod -a -G video,audio,power,dbus, USER~ (adbusers,uucp,vboxusers)
  - ~grep <username> /etc/group~ will give you which groups user already is in
+ unmute audio channels in alsamixer and enable capture as well
+ install [[https://wiki.hyprland.org/Getting-Started/Master-Tutorial/][hyprland]] and all my deps for it:
  - *pacman*: alacritty grim slurp swaylock swayidle mako
    pipewire wireplumber polkit-kde-agent qt5-wayland qt6-wayland wl-clipboard
    otf-font-awesome pacman-contrib qt5ct libva
  - *yay*: xdg-desktop-portal-hyprland-git wlsunset-git brillo hyprpaper-git
    webcord bemenu-git brillo hyprland-git
  - setup *nvidia*:
    - follow hyprland wiki, do not install 'vaapi' driver, but do everything
      else
    - there are 2 checks in aliases, 1st one should show 2 vda things, on your
      gpu the 'driver' field must show NOT nouveau, if it does - check
      both modprobes if those are blocking nouveau and if they don't - add block
      rule and regenerate modprobe
+ install zsh and make it [[https://wiki.archlinux.org/title/Command-line_shell#Changing_your_default_shell][default]]
+ setup *emacs*:
  - deps: fd ripgrep plocate libvterm (for vterm) cmake [[https://zevlg.github.io/telega.el/#building-tdlib][tdlib]] noto-fonts-emoji
    (for stickers and symbols to work)

-----

- enable fstrim in openrc?? (~systemctl enable --now fstrim.timer~)
- enable timesync service in openrc? (~systemctl enable systemd-timesyncd~)

*questionable:*
+ enable reflector in openrc?? (~systemctl enable --now reflector.timer~)

-----

*** Installing mu4e nitbits
First i needed to import my gpg keys (gpg2) from old machine, the process of
which can be found in the end of this [[https://medium.com/@chasinglogic/the-definitive-guide-to-password-store-c337a8f023a1][article]].

The secret.gpg file i copied via ssh using [[https://www.freecodecamp.org/news/scp-linux-command-example-how-to-ssh-file-transfer-from-remote-to-local/][this]] article

Then [[https://stackoverflow.com/questions/33361068/gnupg-there-is-no-assurance-this-key-belongs-to-the-named-user][set trust level]].

Then proceed to mu4e documentation of doom emacs.

** Questions
** learning todos
Document instllation process from [[https://www.youtube.com/watch?v=P0GISSpLlVI][vid]]
** Todos
- update tray thingie
- configure mako
- write a script that will reduce boring typing when in stalling fresh system
- ? why i don't see all messages in tmp hypr logs?

** s6 notes
- https://gitea.artixlinux.org/artix/s6-services
- learn s6, by starting from [[https://skarnet.org/software/s6/why.html][this]] and [[https://forums.gentoo.org/viewtopic-t-1105854.html][this]] article; write service that will
  'updatedb' every hour
  - move some things to user services from [[file:.config/hypr/autorun.sh][autorun]]
  - [[https://github.com/Seme4eg/nixos-dots/blob/b67091196c8f8bd19d4e1210015ba8667e0f5316/hosts/nohomehost/default.nix#L34][plocate hourly]]
  - [[https://github.com/Seme4eg/nixos-dots/blob/b67091196c8f8bd19d4e1210015ba8667e0f5316/hosts/nohomehost/default.nix#L53][nm applet]]
  - [[https://wiki.archlinux.org/title/OpenRC#Usage][converting systemd commands to openrc ones]]
  - enable some essential [[https://wiki.archlinux.org/title/OpenRC#Services][services]] in openrc?
- *suspend / hybernation*:
  - /etc/elogind/logind.conf <- tried
  - acpid + acpid-s6 + enabling its service doesn't help (+ logind handles
    hardware switches like lid events OOTB)
  - [ ] [[https://unix.stackexchange.com/questions/654707/slackware-and-elogind-how-to-enable-suspend-and-hibernate-for-power-user][haven't tried]]
  - arch wiki power management [[https://wiki.archlinux.org/title/Power_management/Suspend_and_hibernate#High_level_interfaces][article]]
  - adding [[https://github.com/elogind/elogind/issues/140#issuecomment-710511939][this]] script didn't help as well, first added separate file in
    system-sleep dir, than replaced original 'nvidia' file contents.. didn't
    help
  - *!* [[https://forum.artixlinux.org/index.php/topic,1639.msg11220.html#msg11220][artix linux forum thread]] <- maybe here is a trace
  - [[https://forum.artixlinux.org/index.php/topic,3599.msg23379.html#msg23379][this thread]] describes my problem, except i can't `cat mem >|
    /sys/power/state` even as sudo, permission denied
