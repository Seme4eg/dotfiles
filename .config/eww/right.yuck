;; vars
(defvar show_essid false)

;; listeners
(deflisten layout "scripts/layout")
(deflisten backlight "scripts/backlight")
(deflisten volume "scripts/volume")
(deflisten gpu "scripts/gpu")

;; polls
(defpoll updates_count :interval "3600s" "checkupdates | wc -l")
(defpoll steam_running :interval "10s" "pgrep steam | wc -l") ;; for gpu
;; Weather with detailed forecast
;; https://gist.github.com/bjesus/f8db49e1434433f78e5200dc403d58a3)
(defpoll weather :interval "3600s" "curl 'https://wttr.in/?format=1'")

(defpoll ESSID_WLAN :interval "1m" "nmcli c | grep wlp0s20f3 | awk '{print ($1)}'")
;; FIXME: don't like the 100s thing, i'd use listening variable here or smth
(defpoll net :interval "100s"
  :initial 'N/A'
  `nmcli -t -f SIGNAL,ACTIVE device wifi | awk -F':' '{if($2=="yes")print $1}'`)


(defwidget container_right []
  (box
    :class "right_container"
    :halign "end"
    :orientation "h"
    :space-evenly false
    :spacing 13
    (_userinfo)
    ;; TODO: tray
    (_sysinfo)
    ;; TODO: idle inhibitor status indicator
    ;; "format-icons": {"activated": "", "deactivated": ""})
    (_telemetery)
    (_battery :capacity {EWW_BATTERY.BAT0.capacity}))) ;; style it beautifully

;; --- misc block ---

(defwidget _userinfo []
  (box
      :class "user-info"
      :space-evenly false
      :spacing 15
      (_layout)
      (_updates)
      (_weather)))

(defwidget _layout []
  (label :width 35 :class "layout" :text "${layout}"))

(defwidget _updates []
  (overlay :class "updates" :width 40
    (label :class "fg" :text "${updates_count}")
    (label :class "bg" :text "")))

(defwidget _weather []
  (label :space-evenly false :halign "end" :text weather))

;; --- System info block ---

(defwidget _sysinfo []
  (box :class "sys-info" :space-evenly false :spacing 8
    (_network :up {EWW_NET.wlp0s20f3.NET_UP} :down {EWW_NET.wlp0s20f3.NET_DOWN})
    (_audioblock)
    (_backlight)))

(defwidget _network [up down]
  (eventbox
    :onhover "eww update show_essid=true"
    :onhoverlost "eww update show_essid=false"
    (box :class "network" :space-evenly false :spacing 8 :hexpand "false"
      (overlay :width 35
        (box :class "fg" :visible {net != ""} :orientation "v" :halign "start"
         (label :text {up / 1024 < 1024 ?
                          " ${round(up / 1024, 0)} Kb" :
                          " ${round(up / 1048576, 0)} Mb"})
         (label :text {down / 1024 < 1024 ?
                       " ${round(down / 1024, 0)} Kb" :
                       " ${round(down / 1048576, 0)} Mb"}))
        (label
          :class "bg"
          :text {net == "" ? "󰤮" :
                 net < 26 ? "󰤟" :
                 net < 51 ? "󰤢" :
                 net < 76 ? "󰤥" : "󰤨"}))
      (revealer
        :class "essid"
        :transition "slideright"
        :reveal show_essid
        :duration "350ms"
        (label :class "essid" :text ESSID_WLAN)))))

(defwidget _audioblock []
  (box :class "bat-box"
    (label :text {volume.is_vol_muted == "true" ? "󰖁" :
                  volume.vol_level < 20 ? "󰕿" :
                  volume.vol_level < 50 ? "󰖀" : "󰕾"})
    (label :text {volume.vol_level})
    (label :text {volume.is_mic_muted == "true" ? "󰍭" : "󰍬"})))

(defwidget _backlight []
  (overlay :class "backlight" :width 30
    (circular-progress
      :value backlight
      :start-at 0
      :thickness 3
      :clockwise true)
    (label :class "circle-text" :text "󰃝")))

;; --- telemetery block ---

(defwidget _telemetery []
  (box :class "telemetery" :space-evenly false
    ;; didn't come up with better way of doing it, 'expander' and 'revealer'
    ;; were keeping the width of a widget instead of fully hide it
    ;; (defvar telemetery_yuck )
    (_cpu)
    (_gpu)
    (_mem)))

(defwidget _cpu []
  (overlay :class "cpu"
    (graph :class "load"
      :value {EWW_CPU.avg}
      :thickness 3
      :width 55
      :time-range "30s"
      :max 100
      ;; :dynamic true
      :line-style "round")
    (graph :class "temp"
      :value {EWW_TEMPS.ACPITZ_TEMP1}
      :thickness 3
      :width 55
      :time-range "30s"
      :min 40
      :max 120
      ;; :dynamic true
      :line-style "round")
    (label :class "temp-text" :text "${EWW_TEMPS.ACPITZ_TEMP1}°")))

(defwidget _gpu []
  (overlay :class "gpu"
    (expander :expanded {steam_running != 0}
      (graph :class "load"
        :value {gpu.load}
        :thickness 3
        :width 50
        :time-range "1m"
        :max 100
        :dynamic true
        :line-style "round"))
    (expander :expanded {steam_running != 0}
      (graph :class "temp"
        :value {gpu.temp}
        :thickness 3
        :width 50
        :style "color: red"
        :time-range "1m"
        :min 30
        :max 100
        :dynamic true
        :line-style "round"))
    (expander :expanded {steam_running != 0}
      (label :class "temp-text" :text "${gpu.temp}°"))))

(defwidget _mem []
  (overlay :class "memory" :width 30
    (circular-progress
      :value {EWW_RAM.used_mem_perc}
      :start-at 0
      :thickness 3
      :clockwise true)
    (label :class "circle-text" :text "󰍛")))

(defwidget _battery [capacity]
  (overlay
    (label :text {EWW_BATTERY.BAT0.capacity})))
    ;; (label :text {EWW_BATTERY.BAT0.status == 'Charging' ? "" :
    ;;               capacity < 15 ? "" :
    ;;               capacity < 30 ? "" :
    ;;               capacity < 60 ? "" :
    ;;               capacity < 80 ? "" : ""})))
