;; vars
(defvar show_essid false)

;; listeners
(deflisten layout "scripts/layout")
(deflisten backlight "scripts/backlight")
(deflisten volume "scripts/volume")
(deflisten gpu "scripts/gpu")

;; polls
(defpoll updates_count :interval "3600s" "checkupdates | wc -l")
(defpoll steam_running :interval "10s" "pgrep steam | wc -l") ;; for gpu
(defpoll swayidle_status :interval "10000s" "systemctl --user is-active swayidle.service")
;; https://github.com/chubin/wttr.in#one-line-output
;; (defpoll weather :interval "3600s" "curl 'https://wttr.in/Becici?format=j2'") ;; JSON
;;%x for text icon of weather; %f for 'feels like' and %w for wind and arrow-direction
(defpoll weather :interval "3600s" "curl 'https://wttr.in/Becici?format=%t+%w'")

(defpoll ESSID_WLAN :interval "3s" "nmcli c | grep wlp0s20f3 | awk '{print ($1)}'")
(defpoll vpnstatus :interval "3s" "systemctl is-active openvpn-client@client.service")
(defpoll net :interval "10s"
  :initial 'N/A'
  `nmcli -t -f SIGNAL,ACTIVE device wifi | awk -F':' '{if($2=="yes")print $1}'`)


(defwidget container_right []
  (box
    :class "right_container"
    :halign "end"
    :orientation "h"
    :space-evenly false
    :spacing 13
    (_userinfo)
    ;; TODO: tray
    (_sysinfo)
    ;; TODO: idle inhibitor status indicator
    ;; "format-icons": {"activated": "", "deactivated": ""})
    (_telemetery)))

;; --- misc block ---

(defwidget _userinfo []
  (box
      :class "user-info"
      :space-evenly false
      :spacing 13
      (_layout)
      (_updates)
      (_weather)))

(defwidget _layout []
  (label :width 35 :class "layout" :text "${layout}"))

(defwidget _updates []
  (overlay :class "updates" :width 40
    (label :class "fg" :text "${updates_count}")
    (label :class "bg" :text "")))

(defwidget _weather []
  (label :class "weather"
    :text {weather}))

;; --- System info block ---

(defwidget _sysinfo []
  (box :class "sys-info" :space-evenly false :spacing 8
    (_network :up {EWW_NET.wlp0s20f3.NET_UP} :down {EWW_NET.wlp0s20f3.NET_DOWN})
    (_audioblock)
    (_backlight)))

(defwidget _network [up down]
  (eventbox
    :onhover "eww update show_essid=true"
    :onhoverlost "eww update show_essid=false"
    (box :class "network" :space-evenly false :spacing 8 :hexpand "false"
      (overlay :width 35
        (box :class "fg" :visible {net != ""} :orientation "v" :halign "center"
          (label :text {up / 1024 < 1024 ?
                           " ${round(up / 1024, 0)} Kb" :
                           " ${round(up / 1048576, 0)} Mb"})
          (label :text {down / 1024 < 1024 ?
                        " ${round(down / 1024, 0)} Kb" :
                        " ${round(down / 1048576, 0)} Mb"}))
        (label
          :class "bg"
          :text {net == "" ? "󰤮" :
                 vpnstatus == "active" ? "󰖂" :
                 net < 26 ? "󰤟" :
                 net < 51 ? "󰤢" :
                 net < 76 ? "󰤥" : "󰤨"}))
      (revealer
        :class "essid"
        :transition "slideright"
        :reveal show_essid
        :duration "350ms"
        (label :class "essid" :text ESSID_WLAN)))))

(defwidget _audioblock []
  (box :class "audio" :space-evenly false
    (label
      :class "volume"
      :text {volume.is_vol_muted == "true" ? "󰖁" :
             volume.vol_level < 20 ? "󰕿${volume.vol_level}" :
             volume.vol_level < 50 ? "󰖀${volume.vol_level}" : "󰕾${volume.vol_level}"}
      :angle 90)
    (progress
      :class {volume.is_vol_muted ? "muted" : ""}
      :value {volume.vol_level}
      :max 100
      :orientation "v"
      :flipped "true"
      :halign "center")
    (progress
      :class {volume.is_mic_muted ? "muted" : ""}
      :value {volume.mic_level}
      :max 100
      :orientation "v"
      :flipped "true"
      :halign "center")
    (label
      :class "mic"
      :angle 270
      :xalign 1
      :text {volume.is_mic_muted == "true" ? "󰍭" : "${volume.mic_level}󰍬"})))
    
(defwidget _backlight []
  ;; eww is started with soystemd so it doesn't know about my local/bin and i
  ;; don't want to pass it there, that's why hardcoded path
  (eventbox :onclick "sh /home/earthian/.local/bin/toggle-idling"
    (overlay :class "backlight" :width 30
      (circular-progress
        :value backlight
        :start-at 0
        :thickness 3
        :clockwise true)
      (label
        :class "circle-text yes"
        :text {swayidle_status == 'active' ? "󰃝" : ""}))))

;; --- telemetery block ---

(defwidget _telemetery []
  (box :class "telemetery" :space-evenly false :spacing 18
    (_revealer
      :revealvar {steam_running != 0}
      :spacing {steam_running != 0 ? 8 : 0}
      (_cpu)
      (_gpu))
    (_mem)
    (_battery :capacity {EWW_BATTERY.BAT0.capacity}))) ;; style it beautifully

(defwidget _cpu []
  (overlay :class "cpu"
    (graph :class "load"
      :value {EWW_CPU.avg}
      :thickness 3
      :width 55
      :time-range "30s"
      :max 100
      :line-style "round")
    (graph :class "temp"
      :value {EWW_TEMPS.ACPITZ_TEMP1}
      :thickness 3
      :width 55
      :time-range "30s"
      :min 40
      :max 120
      :line-style "round")
    (label :yalign 0 :xalign 1 :class "temp-text" :text "${EWW_TEMPS.ACPITZ_TEMP1}°")))

(defwidget _gpu []
  (overlay :class "gpu"
    (graph :class "load"
      :value {gpu.load}
      :thickness 3
      :width 55
      :time-range "1m"
      :max 100
      :line-style "round")
    (graph :class "temp"
      :value {gpu.temp}
      :thickness 3
      :width 55
      :style "color: cyan"
      :time-range "1m"
      :min 30
      :max 100
      :line-style "round")
    (label :class "temp-text" :yalign 0 :xalign 1 :text "${gpu.temp}°")))

(defwidget _mem []
  (overlay :class "memory" :width 30
    (circular-progress
      :value {EWW_RAM.used_mem_perc}
      :start-at 0
      :thickness 3
      :clockwise true)
    (label :class "circle-text" :text "󰍛")))

(defwidget _battery [capacity]
  (label :width 40
    :class {EWW_BATTERY.BAT0.status == 'Charging' ? "bat charging" : "bat"}
    :text "${EWW_BATTERY.BAT0.capacity}󱐋"))
