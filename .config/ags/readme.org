#+title: Readme

- Important references: [[https://aylur.github.io/ags-docs/][great ags wiki]] is the way, just learn to read.
- How to *collapse*, *reveal*, *expand* and such - help is [[https://github.com/druskus20/eugh][here]], yes, example is for
  eww, but ez to rewrite on ags
- css ideas: [[https://www.bypeople.com/css-snippets/][bypeople]]
- any nerd font is needed for icons. I use 'daddytimemono nerd font', if you
  decide to use different one - change all occurances of daddytime font in eww
  styles.

** Todos
*** TODO [#B] listen on 'monitor-add/remove' events on hyprland service
.. and change the monitor on which the bar appears.

Basically same functionality as eww-window-manager service and eww-manager
script were doing.

*** TODO [[https://www.bypeople.com/css-neon-sign-effect/][implement]] blinking animation when [[https://github.com/elkowar/eww/issues/688][animation cpu]] issue will b resolved
*** TODO all the notifications styling all over again
*** TODO rename all classes to snake_case instead of kebab-case
*** TODO power-profiles widget
*** TODO yoink the wallpaper widget from [[https://github.com/qxb3/gruvbox.hypr/tree/vim_styled/.config/ags][this guy]], reskin
*** TODO className, not className
*** TODO check other TODO occurances in ags dir
*** TODO setup a notifications module test function
similar to this
#+begin_src sh
# [body] markup:
# https://specifications.freedesktop.org/notification-spec/latest/ar01s04.html
# -u critical
# -t 5000
notify-send "Test noicon notification" "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas ut mauris quis ante bibendum ..."
say "Test normal notification. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas ut mauris quis ante bibendum ..."
say -u critical "Test critical notification. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas ut mauris quis ante bibendum ..."
#+end_src
*** TODO cava widget

const cavaSettings = {
  bars : 20,
  barHeight : 100,
  align : "end",
  vertical : false,
  smooth : false,
}

const Cava = Variable([],{
    listen: [
      [
        "bash",
        "-c",
        `printf "[general]\n \
                  framerate = 60\n \
                  bars = ${cavaSettings.bars}\n \
                  [output]\n \
                  channels = mono\n \
                  method = raw\n \
                  raw_target = /dev/stdout\n \
                  data_format = ascii\n \
                  ascii_max_range = ${cavaSettings.barHeight}\n" | \
                  cava -p /dev/stdin`
      ],
      out => out.split(";").slice(0,-1)
    ]
})

Cava.connect("notify::value", cava => print(cava.value))
*** TODO make heavy usage of ags signals. Later will see which ones i don't need
but for now try as many of them as possible
