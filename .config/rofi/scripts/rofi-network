#!/bin/env bash

# horrible, unreadable, but still a reference:
# https://github.com/P3rf/rofi-network-manager/blob/master/src/ronema

# NOTE: keep BSSID last! cuz awk print $NF below
FIELDS=(ACTIVE SSID SECURITY FREQ RATE SIGNAL BSSID)
# will b empty if no active connection
initial_ssid=$(nmcli -f active,ssid dev wifi |
  awk -F '  +' '/^yes/ {$1=""; print substr($0,2)}')

kb_refresh="Control+r"
kb_restart="Control+R"
# toggle network, without submenu
kb_quick_connect="Control+Return"
# forget network, without submenu
kb_quick_forget="Alt+x"
kb_show_info="Alt+o" # show info like password, security, qr, ssid

backOption='← back'

_rofi() { rofi -dmenu -i -theme-str '* { font: "syne mono 13"; }' "$@"; }

assert_status() { [ "$1" -eq 1 ] && exit; }

wifi_on() { [ "$(nmcli radio wifi)" = "enabled" ]; }

get_networks() {
  # awk NF to filter empty lines from output
  nmcli -f "$(printf '%s,' "${FIELDS[@]}")" device wifi list | awk NF
}

get_field() {
  field="$1"
  option="$2"
  bssid=$(echo "$option" | awk '{print $NF}') # get last column

  _networks() { nmcli -f bssid,security,ssid device wifi list; }

  case $field in
    ssid)
      _networks | awk -F '  +' "/$bssid/ {\$1=\$2=\"\"; print \$0}" | xargs
      ;;
    security)
      _networks | awk -F '  +' "/$bssid/ {print \$2}" | xargs
      ;;
    *)
      echo "$option"
      ;;
  esac
}

wifi_status() {
  if wifi_on; then
    echo "󰤭  Disable Wi-Fi ($kb_restart to restart)"
  else
    echo "󰤨  Enable Wi-Fi"
  fi
}

toggle_wifi() {
  if wifi_on; then
    nmcli radio wifi off
    say -e "Wifi turned off"
    show_menu
  else
    nmcli radio wifi on
    say -t 5000 -e "Wifi turned on. Scanning for networks..."
    show_menu
  fi
}

restart_wifi() {
  say -t 3000 -e "Restarting wifi"
  nmcli networking off && nmcli networking on
  show_menu
}

ssid_connected() { [ "$initial_ssid" == "$1" ]; }

ssid_saved() {
  # Parses the list of known connections to see if it already contains the SSID.
  # nmcli connection show -- more detailed list of saved networks
  if nmcli -g NAME connection | grep -wqx "$1"; then
    echo "Forget"
    return 0
  else
    return 1
  fi
}

forget_ssid() {
  nmcli connection delete id "$1"
  say -e "Deleted $1."
}

toggle_ssid() {
  ssid="$1"
  security="$2"

  _success() {
    say -e "Connected to $1."
  }
  _connecting() {
    say -t 2000 -e "Connecting to $1..."
  }

  _connect() {
    protected() { [ "$security" != "--" ]; }

    if protected; then
      wifi_pass=$(_rofi -password -theme-str '#entry { placeholder: "password .."; }')
      assert_status $?
    fi

    # if no password provided - quit that script and restore initial connection
    # maybe show return to main menu instead?
    if [ ! "$wifi_pass" ] && protected; then
      # no need to restore initial connection if it wasn't disbanded
      ssid_connected "$initial_ssid" && exit 1
      nmcli connection up id "$initial_ssid"
      say -e "Restored connection to $initial_ssid."
      exit 1
    fi

    _connecting "$ssid"

    # if connection failed - prompt again and remove attempted connection from
    # saved ones (cuz it does save connection even if wrong pass was provided)
    if ! nmcli device wifi connect "$ssid" password "$wifi_pass"; then
      nmcli connection delete id "$1"
      say -e "Nope."
      _connect "$1"
    fi

    # required to show success notif
    return 0
  }

  if ssid_connected "$ssid"; then
    nmcli connection down id "$ssid" && say -e "Disconnected from $ssid."
  else
    if ssid_saved "$ssid"; then
      _connecting "$ssid"
      nmcli connection up id "$ssid" && _success "$ssid"
    else
      _connect "$ssid" && _success "$ssid"
    fi
  fi
}

show_qr() {
  local ssid="$1"

  local security
  security=$(nmcli dev wifi show-password | awk '/^Security/ {print $2}')

  local password
  password="$(nmcli dev wifi show-password | awk '/^Password/ {print $2}')"

  local qrcode_path="$HOME/.cache/rofi/$ssid.png"

  [ -e "$qrcode_path" ] && rm "$qrcode_path"

  # FIXME: idk why it doesn't work, format is correct, info gets decoded
  # correctly
  # https://github.com/zxing/zxing/wiki/Barcode-Contents#wi-fi-network-config-android-ios-11

  # all those params are necessary?
  # qrencode -t png -o "$qrcode_path" -l H -s 25 -m 2 --dpi=192 \
  qrencode -t png -o "$qrcode_path" -s 25 \
    "WIFI:S:${ssid};T:${security};P:${password};;"

  _rofi -theme-str "
entry{enabled:false;}
textbox-prompt-colon{str:\"\";}
window{
  border-radius:6mm; padding:1mm; width:100mm; height:100mm;
  background-image:url(\"$qrcode_path\",both);
}"

  rm "$qrcode_path"
}

show_info() {
  local ssid="$1"
  local security="$2"
  local -a options
  options=("$(nmcli dev wifi show-password)" "$backOption")
  printf '%s\n' "${options[@]}" | _rofi
  assert_status $?
  show_menu
}

# A submenu for a specific device that allows connecting, pairing, and trusting
ssid_menu() {
  local ssid="$1"
  local security="$2"
  local connected
  local qrOption="Generate QR"
  local connected

  if ssid_connected "$ssid"; then
    connected="Disconnect ($kb_quick_connect)"
  else
    connected="Connect ($kb_quick_connect)"
  fi

  local -a options=("$connected")

  if ssid_saved "$ssid"; then
    saved="$(ssid_saved "$ssid") ($kb_quick_forget)"
    show_info="Show info & pass ($kb_show_info)"
    options+=("$saved" "$show_info")
    which qrencode >/dev/null && options+=("$qrOption")
  fi

  options+=("$backOption")

  # Open rofi menu, read chosen option
  action=$(
    printf '%s\n' "${options[@]}" | _rofi \
      -mesg "All hotkeys shown are available from main menu" \
      -kb-custom-1 "$kb_quick_connect" \
      -kb-accept-custom "" \
      -kb-custom-2 "$kb_quick_forget" \
      -kb-custom-3 "$kb_show_info" \
      -theme-str "#entry { placeholder: \"$ssid:\"; }"
  )
  assert_status $?

  # pressed keybinding is more important than selected entry
  [ "$rofi_exit" -ne 0 ] && action="$rofi_exit"

  # Match action option to command
  case "$action" in
    10 | "$connected") toggle_ssid "$ssid" "$security" ;;
    11 | "$saved") forget_ssid "$ssid" ;;
    12 | "$show_info") show_info "$ssid" "$security" ;;
    "$qrOption") show_qr "$1" ;;
    "$backOption") show_menu ;;
    *) echo "No option chosen." ;;
  esac
}

# autoupdate network list
update_networks() {
  local current
  current=$(echo "$networks" | wc -l)
  local new
  local networks

  while true; do
    sleep 1
    networks=$(get_networks)
    new=$(echo "$networks" | wc -l)

    # -w for 'wait' to not spam tnose notification until user refreshes
    [ "$current" -ne "$new" ] && say -w -e "Networks changed, refresh ($kb_refresh)"
  done
}

show_menu() {
  local state
  state=$(wifi_status)
  networks=$(get_networks)

  local current
  current=$(echo -e "$networks" | grep "^yes")

  # start background networks list updating, and kill it later by pid
  update_networks &
  update_pid=$!

  local -a options=("$state")

  wifi_on && options+=("$networks")

  # force monospace font to not get those fields messy
  option=$(printf '%s\n' "${options[@]}" | uniq -u | _rofi -select "$current" \
    -kb-custom-1 "$kb_quick_connect" \
    -kb-accept-custom "" \
    -kb-custom-2 "$kb_quick_forget" \
    -kb-custom-3 "$kb_show_info" \
    -kb-custom-4 "$kb_refresh" \
    -kb-custom-5 "$kb_restart" \
    -theme-str '#entry { placeholder: "Wi-Fi SSID:"; }')

  rofi_exit=$?

  kill $update_pid

  [ $rofi_exit -eq 1 ] && exit

  ssid="$(get_field ssid "$option")"
  security="$(get_field security "$option")"

  case $rofi_exit in
    0)
      case $option in
        "$state") toggle_wifi ;;
        *)
          # no point in showing a 1-entry submenu if ssid isn't saved
          if ssid_saved "$ssid"; then
            ssid_menu "$ssid" "$security"
          else
            toggle_ssid "$ssid" "$security"
          fi
          ;;
      esac
      ;;
    10) toggle_ssid "$ssid" "$security" ;;
    11) forget_ssid "$ssid" ;;
    12) show_info "$ssid" "$security" ;;
    13)
      networks=$(get_networks)
      show_menu
      ;;
    14) restart_wifi ;;
    *) exit ;;
  esac
}

show_menu

exit 0
