#!/usr/bin/env bash
#             __ _       _     _            _              _   _
#  _ __ ___  / _(_)     | |__ | |_   _  ___| |_ ___   ___ | |_| |__
# | '__/ _ \| |_| |_____| '_ \| | | | |/ _ \ __/ _ \ / _ \| __| '_ \
# | | | (_) |  _| |_____| |_) | | |_| |  __/ || (_) | (_) | |_| | | |
# |_|  \___/|_| |_|     |_.__/|_|\__,_|\___|\__\___/ \___/ \__|_| |_|
#
# Author: Nick Clyde (clydedroid)
#
# A script that generates a rofi menu that uses bluetoothctl to
# connect to bluetooth devices and display status info.
#
# Inspired by networkmanager-dmenu (https://github.com/firecat53/networkmanager-dmenu)
# Thanks to x70b1 (https://github.com/polybar/polybar-scripts/tree/master/polybar-scripts/system-bluetooth-bluetoothctl)
#
# Depends on:
#   Arch repositories: rofi, bluez-utils (contains bluetoothctl)

goback="← back"

# Checks if bluetooth controller is powered on
power_on() { bluetoothctl show | grep -q "Powered: yes"; }

toggle_power() {
  if power_on; then
  bluetoothctl power off
  else
    rfkill list bluetooth | grep -q 'blocked: yes' &&
      rfkill unblock bluetooth && sleep 3
    bluetoothctl power on
  fi
  show_menu
}

# FIXME: borked after recent bluez updates, use bluetoothctl in console to
# enable scanning there and connect to new devices
# Checks if controller is scanning for new devices
scan_on() {
  if bluetoothctl show | grep -q "Discovering: yes"; then
    echo "Scan: on" && return 0
  else
    echo "Scan: off" && return 1
  fi
}

# Toggles scanning state
toggle_scan() {
  if scan_on; then
    kill $(pgrep -f "bluetoothctl scan on")
    bluetoothctl scan off
    say -e "Scanning turned off..."
  else
    bluetoothctl scan on
    say -t 5000 -e "Scanning for pairable bluetooth devices..."
    sleep 5
  fi
  show_menu
}

# Checks if controller is able to pair to devices
pairable() {
  if bluetoothctl show | grep -q "Pairable: yes"; then
    echo "Pairable: on" && return 0
  else
    echo "Pairable: off" && return 1
  fi
}

toggle_pairable() {
  if pairable; then
    bluetoothctl pairable off
  else
    bluetoothctl pairable on
  fi
  show_menu
}

# Checks if controller is discoverable by other devices
discoverable() {
  if bluetoothctl show | grep -q "Discoverable: yes"; then
    echo "Discoverable: on" && return 0
  else
    echo "Discoverable: off" && return 1
  fi
}

# Toggles discoverable state
toggle_discoverable() {
  if discoverable; then
    bluetoothctl discoverable off
  else
    bluetoothctl discoverable on
  fi
  show_menu
}

# Checks if a device is connected
device_connected() {
  if bluetoothctl info "$1" | grep -q "Connected: yes"; then
    echo "Connected: yes" && return 0
  else
    echo "Connected: no" && return 1
  fi
}

# Toggles device connection
toggle_connection() {
  if device_connected "$1"; then
    bluetoothctl disconnect "$1"
  else
    bluetoothctl connect "$1"
  fi
  device_menu
}

# Checks if a device is paired
device_paired() {
  device_info=$(bluetoothctl info "$1")
  if echo "$device_info" | grep -q "Paired: yes"; then
    echo "Paired: yes" && return 0
  else
    echo "Paired: no" && return 1
  fi
}

# Toggles device paired state
toggle_paired() {
  if device_paired "$1"; then
    bluetoothctl remove "$1"
  else
    bluetoothctl pair "$1"
  fi
  device_menu
}

# Checks if a device is trusted
device_trusted() {
  device_info=$(bluetoothctl info "$1")
  if echo "$device_info" | grep -q "Trusted: yes"; then
    echo "Trusted: yes" && return 0
  else
    echo "Trusted: no" && return 1
  fi
}

# Toggles device connection
toggle_trust() {
  if device_trusted "$1"; then
    bluetoothctl untrust "$1"
  else
    bluetoothctl trust "$1"
  fi
  device_menu
}

# Using this one in my eww bluetooth widget
print_status() {
  if power_on; then
    mapfile -t paired_devices < <(bluetoothctl devices Paired | grep Device | cut -d ' ' -f 2)
    counter=0

    for device in "${paired_devices[@]}"; do
      device_connected "$device" > /dev/null && ((counter++))
    done

    [ $counter -gt 0 ] && echo "󰂯($counter)" || echo "󰂯"
  else
    echo "󰂲"
  fi
}

get_mac() { echo "$1" | cut -d ' ' -f 2; }

# A submenu for a specific device that allows connecting, pairing, and trusting
device_menu() {
  local -a options

  device_name=$(echo "$device" | cut -d ' ' -f 3-)
  mac=$(get_mac "$device")

  # Build options
  connected=$(device_connected "$mac")
  paired=$(device_paired "$mac")
  trusted=$(device_trusted "$mac")
  options=("$connected" "$paired" "$trusted" "$goback")

  # Open rofi menu, read chosen option
  chosen="$(printf '%s\n' "${options[@]}" | _rofi "$device_name")"
  [ "$?" -eq 1 ] && exit

  # Match chosen option to command
  case "$chosen" in
    "") echo "No option chosen." ;;
    "$connected") toggle_connection "$mac" ;;
    "$paired") toggle_paired "$mac" ;;
    "$trusted") toggle_trust "$mac" ;;
    "$goback") show_menu ;;
  esac
}

# Opens a rofi menu with current bluetooth status and options to connect
show_menu() {
  local -a options
  local power
  local device # will be used in subsequent functions

  if power_on; then
    power="Power: on"

    scan=$(scan_on)
    pairable=$(pairable)
    discoverable=$(discoverable)
    options=("$power" "$scan" "$pairable" "$discoverable")

    # Human-readable names of devices, one per line
    # If scan is off, will only list paired devices
    devices=$(bluetoothctl devices | grep Device | cut -d ' ' -f 3-)

    [ "$devices" ] && options+=("---" "$devices")
  else
    power="Power: off"
    options=("$power")
  fi

  # Open rofi menu, read chosen option
  chosen="$(printf '%s\n' "${options[@]}" | _rofi \
    -kb-custom-1 "Alt+Return" -kb-custom-2 "Alt+p" -kb-custom-3 "Alt+t")"

  status=$?

  [ "$status" -eq 1 ] && exit

  # Match chosen option to command
  case "$chosen" in
    "$power") toggle_power ;;
    "$scan") toggle_scan ;;
    "$discoverable") toggle_discoverable ;;
    "$pairable") toggle_pairable ;;
    *)
      # NOTE: will break if there will be 2 devices with same name
      device=$(bluetoothctl devices | grep "$chosen")
      # Open a submenu if a device is selected
      if [[ $device ]]; then
        mac=$(get_mac "$device")
        case $status in
          10) toggle_connection "$mac" ;;
          11) toggle_paired "$mac" ;;
          12) toggle_trust "$mac" ;;
          *) device_menu
        esac
      fi
  esac
}

# Rofi command to pipe into, can add any options here
_rofi() { rofi -dmenu -i "$@"; }

case "$1" in
  --status) print_status ;;
  *) show_menu ;;
esac
