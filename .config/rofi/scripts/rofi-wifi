#!/usr/bin/env bash

# IN-USE, BSSID
FIELDS=ACTIVE,SSID,SECURITY,FREQ,RATE,SIGNAL
# awk NF to filter empty lines from output
networks=$(nmcli -f "$FIELDS" device wifi list | awk NF) # sed '/--/d' |
# will b empty if no active connection
initial_ssid=$(nmcli -t -f active,ssid dev wifi | grep '^yes' | cut -d: -f2)

wifi_on() {
  if [ "$(nmcli radio wifi)" = "enabled" ]; then
    echo "󰤭  Disable Wi-Fi"
    return 0
  else
    echo "󰤨  Enable Wi-Fi"
    return 1
  fi
}

toggle_wifi() {
  if wifi_on; then
    nmcli radio wifi off
    say -e "Wifi turned off"
    show_menu
  else
    nmcli radio wifi on
    say -t 5000 -e "Wifi turned on. Scanning for networks..."
    sleep 5
    show_menu
  fi
}

restart_wifi() {
  say -t 3000 -e "Restarting wifi"
  nmcli networking off
  sleep 3
  nmcli networking on
  show_menu
}

ssid_connected() {
  ssid="$1"
  if [ "$initial_ssid" == "$ssid" ]; then
    echo "Disconnect"
    return 0
  else
    echo "Connect"
    return 1
  fi
}

ssid_saved() {
  # Parses the list of known connections to see if it already contains the SSID.
  # nmcli connection show -- more detailed list of saved networks
  if nmcli -g NAME connection | grep -wqx "$1"; then
    echo "Forget"
    return 0
  else
    return 1
  fi
}

forget_ssid() {
  nmcli connection delete id "$1"
  say -e "Deleted $1."
}

toggle_ssid() {
  ssid="$1"
  security="$2"
  vpnstatus=$(systemctl is-active openvpn-client@client.service)
  if [ "$vpnstatus" == 'active' ]; then
    # sudo systemctl stop openvpn-client@client.service
    # command above doesn't work sometimes and network on laptop jus hangs
    sudo pkill -9 openvpn
    vpnneedsactivation=0
  fi

  _success() {
    say -e "Connected to $1."
    if [ "$vpnneedsactivation" ]; then
      sleep 5
      sudo systemctl start openvpn-client@client.service
    fi
  }
  _connecting() {
    say -t 2000 -e "$(whoami)" "Connecting to $1..."
  }

  _connect() {
    protected() { if [ "$security" = "--" ]; then return 1; else return 0; fi }
    protected && wifi_pass=$(rofi -dmenu -password \
      -theme-str '#entry { placeholder: "password .."; }')
    # if no password provided - quit that script and restore initial connection
    # maybe show return to main menu instead?
    if [ ! "$wifi_pass" ] && protected; then
      # no need to restore initial connection if it wasn't disbanded
      ssid_connected "$initial_ssid" && exit 1
      nmcli connection up id "$initial_ssid"
      say -e "Restored connection to $initial_ssid."
      exit 1
    fi
    _connecting "$ssid"
    nmcli device wifi connect "$1" password "$wifi_pass"
    # if connection failed - prompt again and remove attempted connection from
    # saved ones (cuz it does save connection even if wrong pass was provided)
    if ! $? ; then
      nmcli connection delete id "$1"
      say -e "Nope."
      _connect "$1"
    fi
    # required to show success notif
    return 0
  }

  if ssid_connected "$ssid"; then
    nmcli connection down id "$ssid" && say -e "Disconnected from $ssid."
  else
    if ssid_saved "$ssid"; then
      _connecting "$ssid"
      nmcli connection up id "$ssid" && _success "$ssid"
    else
      _connect "$ssid" && _success "$ssid"
    fi
  fi
}

show_qr() {
  ssid="$1"
  security="$2"
  tmp_ssid="${ssid// /_}"
  qrcode_dir="$HOME/.cache/rofi"
  qrcode_path="$qrcode_dir/$tmp_ssid.png"

	if [[ ! -e "$qrcode_path" ]]; then
		qrencode -t png -o "$qrcode_path" -l H -s 25 -m 2 --dpi=192 \
      "WIFI:S:""$ssid"";T:""$security"";P:""$PASSWORD"";;"
	fi

  rofi -dmenu -theme-str "
entry{enabled:false;}
textbox-prompt-colon{str:\"\";}
window{
  border-radius:6mm; padding:1mm; width:100mm; height:100mm;
  background-image:url(\"$qrcode_path\",both);
}"
}

show_pass() {
  ssid="$1"
  security="$2"

  which qrencode && qr_option="QR\n"

  options="$(nmcli dev wifi show-password)\n${qr_option}Back"

  chosen="$(echo -e "$options" | rofi -dmenu -i)"

  case $chosen in
    "QR") show_qr "$1" "$2" ;;
    "Back") ssid_menu "$1" "$2" ;;
  esac
}


# A submenu for a specific device that allows connecting, pairing, and trusting
ssid_menu() {
  ssid="$1"
  security="$2"

  # Build options
  connected=$(ssid_connected "$ssid")
  saved=$(ssid_saved "$ssid")
  ssid_saved "$ssid" && options="$connected\n$saved\nShow password\nBack" ||
    options="$connected\nBack"

  # Open rofi menu, read chosen option
  chosen="$(echo -e "$options" | rofi -dmenu -i \
    -theme-str "#entry { placeholder: \"$ssid:\"; }" \
    -theme-str '* { font: "syne mono 13"; }')"

  # Match chosen option to command
  case "$chosen" in
    "$connected") toggle_ssid "$ssid" "$security" ;;
    "$saved") forget_ssid "$ssid" ;;
    "Show password") show_pass "$ssid" "$security" ;;
    "Back") show_menu ;;
    *) echo "No option chosen." ;;
  esac
}

# toggle network, without submenu
quick_connect="Control+Return"
# forget network, without submenu
quick_forget="Alt+k"
refresh="Control+r"

# autoupdate network list
update_networks() {
  while true; do
    sleep 1
    _networks=$(nmcli --fields "$FIELDS" device wifi list | sed '/--/d' | awk NF)
    _count=$(echo "$_networks" | wc -l)
    count=$(echo "$networks" | wc -l)

    # -w for 'wait' to not spam tnose notification until user refreshes
    [ "$_count" -ne "$count" ] && say -w -e "Networks changed, refresh ($refresh)"
  done
}

show_menu() {
  state=$(wifi_on)

  # start background networks list updating, and kill it later by pid
  update_networks &
  update_pid=$!

  wifi_on && options="$state\n$networks\nrestart" || options="$state"
  # force monospace font to not get those fields messy
  option=$(echo -e "$options" | uniq -u |
    rofi -dmenu -i -selected-row 2 \
      -kb-custom-1 "$quick_connect" \
      -kb-accept-custom "" \
      -kb-custom-2 "$quick_forget" \
      -kb-custom-3 "$refresh" \
      -theme-str '#entry { placeholder: "Wi-Fi SSID:"; }' \
      -theme-str '* { font: "syne mono 13"; }')

  rofi_exit=$?

  kill $update_pid

  [ $rofi_exit -eq 1 ] && exit

  case $option in
    "$state") toggle_wifi ;;
    "restart") restart_wifi ;;
    *)
      ssid=$(echo "$option" | awk -F '  +' '{print $2}')
      security=$(echo "$option" | awk -F '  +' '{print $3}')
      case $rofi_exit in
        10) toggle_ssid "$ssid" "$security" ;;
        11) forget_ssid "$ssid" ;;
        12)
          networks=$(nmcli --fields "$FIELDS" device wifi list | sed '/--/d' | awk NF)
          show_menu
          ;;
        0) ssid_menu "$ssid" "$security" ;;
        *) exit ;;
      esac
      ;;
  esac
}

show_menu

exit 0
