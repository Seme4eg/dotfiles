** Documentation
- https://teu5us.github.io/nix-lib.html - nix builtins and nixpkgs lib packaged
  together
- syntax summary - https://nixos.org/manual/nixos/stable/index.html#sec-nix-syntax-summary
- https://nixos.org/manual/nixos/stable/options.html - nixpkgs builtins
- nix language - https://nixos.org/manual/nix/stable/expressions/language-operators.html

*Sources*:
- https://www.youtube.com/watch?v=AGVXJ-TIv3Y - 3h video

** Chapter 3
- nixos-rebuild (--help)
- nixos-rebuild switch - switches right away
- nixos-rebuild test
- nixos-rebuild boot # make it boot default, but switch only after reboot
- nixos-rebuild build # to test if things compile, but do nothing more

If you have a machine that supports hardware virtualisation, you can also test
the new configuration in a sandbox by building and running a QEMU virtual
machine that contains the desired configuration. Just do

: $ nixos-rebuild build-vm
: $ ./result/bin/run-*-vm

*How to know whether my machine supports it or not?*

** Chapter 6
#+begin_center
Interactive exploration of the configuration is possible using nix repl, a read-eval-print loop for Nix expressions. A typical use:

$ nix repl '<nixpkgs/nixos>'
...
#+end_center

** Chapter 7 declarative package management
You can get a list of the available packages as follows:

$ nix-env -qaP '*' --description
nixos.firefox   firefox-23.0   Mozilla Firefox - the browser, reloaded
...


*7.1.1* - customising package. Install emacs 29 with native-comp, wayland and gtk

** Todo
rewrite config using nesting (chapter 6), set up modularity (6.3)

enable flakes:
#+begin_src nix (configuration.nix)
{ pkgs, ... }: {
  nix.settings.experimental-features = [ "nix-command" "flakes" ];
}
#+end_src

services.xserver.videoDrivers = [ "nvidia" ]; ? (10.3)

#+NAME: 12.1.2
hardware.opengl.extraPackages = [
  intel-compute-runtime
];

#+NAME: home-manager
#+begin_center
home-manager? - https://youtu.be/axOxLJ4BWmY?t=1769
home-manager switch # updates system accordingly with config file?
man home-manager
man home-configuration.nix
#+end_center

https://nixos.org/learn.html -> scroll down till u c 'nix manual' / 'nixpkgs
manual' / 'nixos manual'

: security.sudo.enable = fales; ?? (security.doas.enable = true;)

Setup [[https://wiki.hyprland.org/Nix/#cachix][cachix]] for hyprland

Look through these configs:
- hlissner listed:
  - https://github.com/LEXUGE/nixos
  - https://github.com/bqv/rc
  - https://git.sr.ht/~dunklecat/nixos-config/tree
  - https://github.com/purcell/dotfiles
- https://github.com/MatthiasBenaets/nixos-config
- https://github.com/viperML/dotfiles ( and dots he has in 'resources' section )

** 3h video notes
- to install package that we don't want to appear in configuration (like
  gparted), which we'll most likely use once - nix-env -iA nixos.<package>. But
  better go to search.nixos.org and search for needed package there.
  - ~nix-env -q~ - list packages installed that way
  - ~nix-env --uninstall <package>~
- if you install soft as package - it might not b what u want, instead sometimes
  you might need to enable corresponding 'service' to start the needed soft. In
  this case you can omit declaring package in packages set and instead only go
  with it's options, nixos will figure it out
- variables example: https://youtu.be/AGVXJ-TIv3Y?t=4207
- https://youtu.be/AGVXJ-TIv3Y?t=6764 - dotfiles, home-manager standalone
  setup + .doom.d copying?? + declarative way of configuring things (again..
  why???)
- xsession (cursor) setup example - https://youtu.be/AGVXJ-TIv3Y?t=10201
- gtk setup example - https://youtu.be/AGVXJ-TIv3Y?t=10201
- overlay example - https://youtu.be/AGVXJ-TIv3Y?t=10361
- bluetooth setup example - https://youtu.be/AGVXJ-TIv3Y?t=10361

*** Garbage Collection
*Command line:*

- list generations - ~nix-env --list-generations~
- remove specific generations - ~nix-env --delete-generations 1 2 3 4 5 ..~
- remove generations older than ... days - ~nix-env --delete-generations 7d~

Or just use ~nix-collect-garbage~ - remove undeclared packages, dependencies and
symlinks. Add ~-d~ flag to remove above of older generations and better run it as
sudo. (All in 1 command: ~sudo nix-collect-garbage -d~)

- Optimize store - ~nix-store --gc~
*** Flakes
nix flake update

sudo nixos-rebuild switch --flake .#<user> (is it possitle to omit last part and
use some 'default'?)

** Notes
*Chapter 61. Clening the Nix Store*: ~sudo nix-collect-gargabe (-d)~

nix search <package> -> returns nixpkgs.<actuallpkgname> -> add this <...> name
in pkgs arr.

nixos-version

nix flake show - shows tree of flakes

man configuration.nix

'Declared by:' <nixpkgs/nixos/modules/system/boot/binfmt.nix> -> this source can
be viewd at https://github.com/NixOS/nixpkgs in 'nixos' folder

nixos.org -> search -> either search for package or options (top bar)

nixos.wiki

in scripts better to use #!/bin/sh cuz bash has different location

Overlay example: https://youtu.be/0p9_AqHWynw?t=201 and https://youtu.be/0p9_AqHWynw?t=215

Home-manager setup example: https://youtu.be/0p9_AqHWynw?t=311

*Chapter 61. Logging* - journalctl -b
** Todo sources
Configurations ([[https://nixos.wiki/wiki/Configuration_Collection][list of example configurations]]):
- https://github.com/viperML/dotfiles
- https://github.com/fufexan/dotfiles
